----------------------------------------------------Introduction-----------------------------------------------------

- What is Redux ? 
    > Redux is a predictable state container for javascript apps.

- It is for javascript apps
    > Redux is not tightly coupled with react
    > It can be use with react, angular, vue and vanilla javascript
    > It is library for javascript apps

- It is a state container
    > It stores and manages the state of an application

- It is predictable
    > predictable means all state transitions are explicit and it is possible to keep track of them
    > i.e changes to the application's state becomes predictable 

- Why Redux ? 
    > In Redux, State contain outside of the component hence available to all the components
    > So we will not need to lift the state in parent component and pass state to other child components(prop drilling)
    
- Alternate to Redux
    > React context - prevents prop drilling
    > useContext + useReducer

- What is React-Redux ? 
    > library for binding redux to react

----------------------------------------------------Setting up project-----------------------------------------------------

1. Install node and npn (ignore if already installed)
2. Create Folder 
3. Enter into folder, run "npm init --yes" (package.json will be created)
4. install redux, "npm install redux"
5. create index.js, add log statement and test it using cmd "node index" in terminal

----------------------------------------------------Three Core Concepts-----------------------------------------------------

- Store
    > Holds the state of an application

- Action
    > Describes changes in the state of the application, i.e what happened with the state

- Reducer
    > Ties the store and action together, i.e carried out state transitions depending on the action

----------------------------------------------------Three Principles-----------------------------------------------------

//Relate the examples give below  with respect to cake shop

First Principle
    > The state of your whole application is stored in an object tree within a single store
    > i.e maintaining the application state in a single object which would be manage by the redux store
    eg: {
        noOfCakes: 10
    } 

Second Principle
    > The only way to change the state is to dispatch an action, an object describing what happened
    > i.e to update the state of your app, you need to let redux know about that with an action
    > Not allowed to directly update the state object
    eg: {
        type: BUY_CAKE
    }

Third Principle
    > To specify how the state tree is transformed by actions, you write pure reducers
    > Reducer - (previousState, action) => newState
    eg:
    const reducer = (state, action) => {
        switch(action.type){
            case BUY_CAKE: return {
                noOfCakes: state.noOfCakes - 1
            }
        }
    }

----------------------------------------------------Actions-----------------------------------------------------

    > It is the only way your application can interact with the store
    > Carries some information from your app to redux store
    > plain javascript object
    > Have a 'type' property that indicates the type of action being performed 
    > The 'type' property is typically defined as string constant

----------------------------------------------------Reducers-----------------------------------------------------

    > Specify how the app's state changes in response to the action sent to the store
    > It is simply a function that accepts the state and action as arguments and returns next state
    